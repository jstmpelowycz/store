CREATE TYPE ROLE AS ENUM ('manager', 'cashier');

CREATE TABLE Employee(
  id SERIAL PRIMARY KEY,
  last_name VARCHAR(50) NOT NULL,
  first_name VARCHAR(50) NOT NULL,
  patronymic VARCHAR(50),
  role ROLE NOT NULL,
  salary NUMERIC(13,4),
  birth_date DATE NOT NULL CHECK (EXTRACT(YEAR FROM age(now(), birth_date)) >= 18),
  employment_date DATE NOT NULL CHECK (employment_date <= CURRENT_DATE),
  phone_number VARCHAR(13) NOT NULL UNIQUE CHECK (
            phone_number LIKE '+%'
            AND LENGTH(phone_number) <= 13
        ),
  city VARCHAR(50) NOT NULL,
  street VARCHAR(50) NOT NULL,
  zip_code VARCHAR(9) NOT NULL
);

CREATE TABLE Product(
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE,
  description VARCHAR(100) NOT NULL,
  category_id INT NOT NULL,
  FOREIGN KEY (category_id) REFERENCES Category(id) ON UPDATE CASCADE ON DELETE NO ACTION
);


CREATE TABLE Category (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE Store_Product(
  upc VARCHAR(12) PRIMARY KEY,
  upc_prom VARCHAR(12) UNIQUE,
  selling_price NUMERIC(13,4) NOT NULL CHECK (selling_price > 0),
  amount INT NOT NULL CHECK (amount > 0),
  is_promotional BOOLEAN NOT NULL,
  product_id INT NOT NULL UNIQUE,
  FOREIGN KEY (product_id) REFERENCES Product(id) ON UPDATE CASCADE ON DELETE NO ACTION,
  FOREIGN KEY (upc_prom) REFERENCES Store_Product(upc) ON UPDATE CASCADE ON DELETE SET NULL
);

--CONSTRAINT fk_upc_prom CHECK ((UPC_prom IS NULL) OR (UPC_prom IN (SELECT UPC FROM Store_Product WHERE promotional_product = TRUE)))

CREATE TABLE Sale(
  store_product_upc VARCHAR(12),
  amount INT NOT NULL CHECK (amount > 0),
  selling_price NUMERIC(13,4) NOT NULL CHECK (selling_price > 0),
  invoice_id VARCHAR(10),
  PRIMARY KEY (store_product_upc, invoice_id),
  FOREIGN KEY (invoice_id) REFERENCES Invoice(id) ON UPDATE CASCADE ON DELETE NO ACTION,
  FOREIGN KEY (store_product_upc) REFERENCES Store_Product(upc) ON UPDATE CASCADE ON DELETE NO ACTION
);

CREATE TABLE Invoice(
  id VARCHAR(10) PRIMARY KEY,
  employee_id INT NOT NULL,
  card_id VARCHAR(13),
  print_date DATE NOT NULL DEFAULT CURRENT_DATE,
  total NUMERIC(13, 4) NOT NULL CHECK(total >= 0),
  vat NUMERIC(13,4) GENERATED ALWAYS AS (total * 0.2) STORED,
  FOREIGN KEY (card_id) REFERENCES Customer_Card(id) ON UPDATE CASCADE ON DELETE NO ACTION,
  FOREIGN KEY (employee_id) REFERENCES Employee(id) ON UPDATE CASCADE ON DELETE NO ACTION
);

CREATE TABLE
    Customer_Card(
        id VARCHAR(13) PRIMARY KEY,
        customer_last_name VARCHAR(50) NOT NULL,
        customer_first_name VARCHAR(50) Not NULL,
        customer_patronymic VARCHAR(50),
        phone_number VARCHAR(13) NOT NULL UNIQUE CHECK (
            phone_number LIKE '+%'
            AND LENGTH(phone_number) <= 13
        ),
        city VARCHAR(50) NOT NULL,
        street VARCHAR(50) NOT NULL,
        zip_code VARCHAR(9) NOT NULL,
        percent INT NOT NULL CHECK (percent > 0)
    );

